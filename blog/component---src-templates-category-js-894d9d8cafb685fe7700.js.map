{"version":3,"sources":["webpack:///./src/components/PostsListing.module.scss","webpack:///./src/templates/category.js","webpack:///./src/components/PostListing.js"],"names":["module","exports","CategoryTemplate","data","pageContext","title","category","config","siteTitle","postEdges","allMarkdownRemark","edges","pageQuery","PostListing","postList","forEach","postEdge","push","path","node","fields","slug","tags","frontmatter","categories","cover","date","excerpt","timeToRead","getPostList","className","styles","articleList","map","post","to","key","articleBox","style","backgroundImage","dimmer","right","meta","join"],"mappings":"8EACAA,EAAOC,QAAU,CAAC,YAAc,2CAA2C,WAAa,0CAA0C,OAAS,qCAAqC,MAAQ,oCAAoC,KAAO,qC,kCCDnO,4IAqBeC,UAdU,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAT,OACvB,kBAAC,IAAD,KACE,8BACE,kBAAC,IAAD,CAAQC,MAAK,KAAOD,EAAYE,SAAnB,OAAkCC,IAAOC,YACtD,wCAEL,IACAJ,EAAYE,UAEP,kBAAC,IAAD,CAAaG,UAAWN,EAAKO,kBAAkBC,WAQ9C,IAAMC,EAAS,Y,kCCxBtB,0DA8CeC,IA1CK,SAAC,GAAmB,IAAjBJ,EAAgB,EAAhBA,UAkBfK,EAjBc,WAClB,IAAMA,EAAW,GAajB,OAZAL,EAAUM,SAAQ,SAAAC,GAChBF,EAASG,KAAK,CACZC,KAAMF,EAASG,KAAKC,OAAOC,KAC3BC,KAAMN,EAASG,KAAKI,YAAYD,KAChCE,WAAYR,EAASG,KAAKI,YAAYC,WACtCC,MAAOT,EAASG,KAAKI,YAAYE,MACjCpB,MAAOW,EAASG,KAAKI,YAAYlB,MACjCqB,KAAMV,EAASG,KAAKC,OAAOM,KAC3BC,QAASX,EAASG,KAAKQ,QACvBC,WAAYZ,EAASG,KAAKS,gBAGvBd,EAGQe,GACjB,OACE,yBAAKC,UAAWC,IAAOC,aAErBlB,EAASmB,KAAI,SAAAC,GAAI,OACf,kBAAC,OAAD,CAAMC,GAAID,EAAKhB,KAAMkB,IAAKF,EAAK7B,OAC7B,6BAASyB,UAAWC,IAAOM,WAAYC,MAAO,CAACC,gBAAgB,QAASL,EAAKT,MAAf,OAC5D,yBAAKK,UAAWC,IAAOS,QACrB,yBAAKV,UAAWC,IAAOU,OACrB,4BAAKP,EAAK7B,OACV,yBAAKyB,UAAWC,IAAOW,MACpBR,EAAKR,KADR,MACsB,8BAAOQ,EAAKV,WAAWmB,KAAK,QAAe,IADjE,KAEWT,EAAKN,WAFhB,YAEqC,KAErC,2BAAIM,EAAKP","file":"component---src-templates-category-js-894d9d8cafb685fe7700.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"articleList\":\"PostsListing-module--article-list--3otS9\",\"articleBox\":\"PostsListing-module--article-box--1duIQ\",\"dimmer\":\"PostsListing-module--dimmer--345eN\",\"right\":\"PostsListing-module--right--1oF3Z\",\"meta\":\"PostsListing-module--meta--9gOUv\"};","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport { graphql } from 'gatsby'\r\nimport Layout from '../layout'\r\nimport PostListing from '../components/PostListing'\r\nimport config from '../../data/SiteConfig'\r\n\r\nconst CategoryTemplate = ({ data, pageContext }) => (\r\n  <Layout>\r\n    <main>\r\n      <Helmet title={` \"${pageContext.category}\" - ${config.siteTitle}`} />\r\n      <h1>\r\nCategory:\r\n{' '}\r\n{pageContext.category}\r\n</h1>\r\n      <PostListing postEdges={data.allMarkdownRemark.edges} />\r\n    </main>\r\n  </Layout>\r\n)\r\n\r\nexport default CategoryTemplate\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query CategoryPage($category: String) {\r\n    allMarkdownRemark(\r\n      limit: 1000\r\n      sort: { fields: [fields___date], order: DESC }\r\n      filter: { frontmatter: { categories: { in: [$category] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n          }\r\n          excerpt\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            tags\r\n            cover\r\n            date\r\n            categories\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\nimport { Link } from 'gatsby'\r\nimport styles from './PostsListing.module.scss'\r\n\r\nconst PostListing = ({ postEdges }) => {\r\n  const getPostList = () => {\r\n    const postList = []\r\n    postEdges.forEach(postEdge => {\r\n      postList.push({\r\n        path: postEdge.node.fields.slug,\r\n        tags: postEdge.node.frontmatter.tags,\r\n        categories: postEdge.node.frontmatter.categories,\r\n        cover: postEdge.node.frontmatter.cover,\r\n        title: postEdge.node.frontmatter.title,\r\n        date: postEdge.node.fields.date,\r\n        excerpt: postEdge.node.excerpt,\r\n        timeToRead: postEdge.node.timeToRead\r\n      })\r\n    })\r\n    return postList\r\n  }\r\n\r\n  const postList = getPostList()\r\n  return (\r\n    <div className={styles.articleList}>\r\n      {/* Your post list here. */\r\n      postList.map(post => (\r\n        <Link to={post.path} key={post.title}>\r\n          <article className={styles.articleBox} style={{backgroundImage: `url('${post.cover}')`}}>\r\n            <div className={styles.dimmer}>\r\n              <div className={styles.right}>\r\n                <h3>{post.title}</h3>\r\n                <div className={styles.meta}>\r\n                  {post.date} &mdash; <span>{post.categories.join(' / ')}</span>{' '}\r\n                  &mdash; {post.timeToRead} Min Read{' '}\r\n                </div>\r\n                <p>{post.excerpt}</p>\r\n              </div>\r\n            </div>\r\n          </article>\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostListing\r\n"],"sourceRoot":""}