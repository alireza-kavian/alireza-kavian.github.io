{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/components/PostsListing.module.scss","webpack:///./src/pages/index.js","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/PostListing.js"],"names":["SEO","title","description","image","postURL","postNode","postPath","postSEO","postMeta","frontmatter","excerpt","cover","urljoin","config","siteUrl","pathPrefix","siteTitle","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","url","name","alternateName","siteTitleAlt","push","itemListElement","position","item","headline","content","type","JSON","stringify","property","siteFBAppID","userTwitter","module","exports","Index","data","postEdges","allMarkdownRemark","edges","pageQuery","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","str","join","parts","split","arguments","slice","call","definition","PostListing","postList","forEach","postEdge","path","node","fields","slug","tags","categories","date","timeToRead","getPostList","className","styles","articleList","map","post","to","key","articleBox","style","backgroundImage","dimmer","right","meta"],"mappings":"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","file":"component---src-pages-index-js-8639298078dc172e6b89.js","sourcesContent":["import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport urljoin from 'url-join'\r\nimport config from '../../data/SiteConfig'\r\n\r\nconst SEO = ({ postNode, postPath, postSEO }) => {\r\n  let title\r\n  let description\r\n  let image\r\n  let postURL\r\n  if (postSEO) {\r\n    const postMeta = postNode.frontmatter\r\n    ;({ title } = postMeta)\r\n    description = postMeta.description ? postMeta.description : postNode.excerpt\r\n    image = postMeta.cover\r\n    postURL = urljoin(config.siteUrl, config.pathPrefix, postPath)\r\n  } else {\r\n    title = config.siteTitle\r\n    description = config.siteDescription\r\n    image = config.siteLogo\r\n  }\r\n\r\n  image = urljoin(config.siteUrl, config.pathPrefix, image)\r\n  const blogURL = urljoin(config.siteUrl, config.pathPrefix)\r\n  const schemaOrgJSONLD = [\r\n    {\r\n      '@context': 'http://schema.org',\r\n      '@type': 'WebSite',\r\n      url: blogURL,\r\n      name: title,\r\n      alternateName: config.siteTitleAlt ? config.siteTitleAlt : ''\r\n    }\r\n  ]\r\n  if (postSEO) {\r\n    schemaOrgJSONLD.push(\r\n      {\r\n        '@context': 'http://schema.org',\r\n        '@type': 'BreadcrumbList',\r\n        itemListElement: [\r\n          {\r\n            '@type': 'ListItem',\r\n            position: 1,\r\n            item: {\r\n              '@id': postURL,\r\n              name: title,\r\n              image\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        '@context': 'http://schema.org',\r\n        '@type': 'BlogPosting',\r\n        url: blogURL,\r\n        name: title,\r\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\r\n        headline: title,\r\n        image: {\r\n          '@type': 'ImageObject',\r\n          url: image\r\n        },\r\n        description\r\n      }\r\n    )\r\n  }\r\n  return (\r\n    <Helmet>\r\n      {/* General tags */}\r\n      <meta name=\"description\" content={description} />\r\n      <meta name=\"image\" content={image} />\r\n\r\n      {/* Schema.org tags */}\r\n      <script type=\"application/ld+json\">\r\n        {JSON.stringify(schemaOrgJSONLD)}\r\n      </script>\r\n\r\n      {/* OpenGraph tags */}\r\n      <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\r\n      {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={description} />\r\n      <meta property=\"og:image\" content={image} />\r\n      <meta\r\n        property=\"fb:app_id\"\r\n        content={config.siteFBAppID ? config.siteFBAppID : ''}\r\n      />\r\n\r\n      {/* Twitter Card tags */}\r\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n      <meta\r\n        name=\"twitter:creator\"\r\n        content={config.userTwitter ? config.userTwitter : ''}\r\n      />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={description} />\r\n      <meta name=\"twitter:image\" content={image} />\r\n    </Helmet>\r\n  )\r\n}\r\n\r\nexport default SEO\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"articleList\":\"PostsListing-module--article-list--3otS9\",\"articleBox\":\"PostsListing-module--article-box--1duIQ\",\"dimmer\":\"PostsListing-module--dimmer--345eN\",\"right\":\"PostsListing-module--right--1oF3Z\",\"meta\":\"PostsListing-module--meta--9gOUv\"};","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport { graphql } from 'gatsby'\r\nimport Layout from '../layout'\r\nimport PostListing from '../components/PostListing'\r\nimport SEO from '../components/SEO'\r\nimport config from '../../data/SiteConfig'\r\n\r\nconst Index = ({ data }) => (\r\n  <Layout>\r\n    <main>\r\n      <Helmet title={config.siteTitle} />\r\n      <SEO />\r\n      <PostListing postEdges={data.allMarkdownRemark.edges} />\r\n    </main>\r\n  </Layout>\r\n)\r\n\r\nexport default Index\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query IndexQuery {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [fields___date], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n          }\r\n          excerpt\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            tags\r\n            cover\r\n            date\r\n            categories\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React from 'react'\r\nimport { Link } from 'gatsby'\r\nimport styles from './PostsListing.module.scss'\r\n\r\nconst PostListing = ({ postEdges }) => {\r\n  const getPostList = () => {\r\n    const postList = []\r\n    postEdges.forEach(postEdge => {\r\n      postList.push({\r\n        path: postEdge.node.fields.slug,\r\n        tags: postEdge.node.frontmatter.tags,\r\n        categories: postEdge.node.frontmatter.categories,\r\n        cover: postEdge.node.frontmatter.cover,\r\n        title: postEdge.node.frontmatter.title,\r\n        date: postEdge.node.fields.date,\r\n        excerpt: postEdge.node.excerpt,\r\n        timeToRead: postEdge.node.timeToRead\r\n      })\r\n    })\r\n    return postList\r\n  }\r\n\r\n  const postList = getPostList()\r\n  return (\r\n    <div className={styles.articleList}>\r\n      {/* Your post list here. */\r\n      postList.map(post => (\r\n        <Link to={post.path} key={post.title}>\r\n          <article className={styles.articleBox} style={{backgroundImage: `url('${post.cover}')`}}>\r\n            <div className={styles.dimmer}>\r\n              <div className={styles.right}>\r\n                <h3>{post.title}</h3>\r\n                <div className={styles.meta}>\r\n                  {post.date} &mdash; <span>{post.categories.join(' / ')}</span>{' '}\r\n                  &mdash; {post.timeToRead} Min Read{' '}\r\n                </div>\r\n                <p>{post.excerpt}</p>\r\n              </div>\r\n            </div>\r\n          </article>\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostListing\r\n"],"sourceRoot":""}